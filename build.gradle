plugins {
    id 'java'
    id 'application'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.9.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'org.example.payment_guard'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven/"
    }
    maven { url "https://maven.google.com" }
}

dependencies {
    implementation 'org.postgresql:postgresql:42.7.3'
    
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Cache implementation
    implementation 'com.github.ben-manes.caffeine:caffeine'
    
    // Flink Core
    implementation 'org.apache.flink:flink-streaming-java:1.18.0'
    implementation 'org.apache.flink:flink-clients:1.18.0'
    
    // Kafka Clients (직접 사용)
    implementation 'org.apache.kafka:kafka-clients:3.4.0'
    // Confluent Schema Registry + Avro Serializer
    implementation 'io.confluent:kafka-avro-serializer:7.6.0'
    implementation 'io.confluent:kafka-schema-registry-client:7.6.0'
    
    // JSON Processing
    implementation 'org.apache.flink:flink-json:1.18.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    
    // Testing
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Avro
    implementation 'org.apache.avro:avro:1.11.1'
    implementation 'org.apache.flink:flink-avro:1.18.0'
    implementation 'org.apache.flink:flink-avro-confluent-registry:1.18.0'

    /* ---------- Gemini(Pro) SDK ---------- */
    implementation 'com.google.genai:google-genai:1.0.0'    
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
}

avro {
    stringType = "String"
    fieldVisibility = "PRIVATE"
    createSetters = true
}

sourceSets {
    main {
        java {
            srcDirs += 'build/generated-main-avro-java'
        }
    }
}

shadowJar {
  archiveBaseName.set('report-job')
  mergeServiceFiles()  // META-INF/services 병합
}

application {
    mainClass = 'org.example.payment_guard.ReportApplication'
    applicationDefaultJvmArgs = [
        '--add-opens=java.base/java.util=ALL-UNNAMED',
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
        '--add-opens=java.base/java.text=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
        '--add-opens=java.base/java.nio=ALL-UNNAMED',
        '--add-opens=java.base/java.util.stream=ALL-UNNAMED',
        '--add-opens=java.base/java.util.function=ALL-UNNAMED',
        '--add-opens=java.base/java.time=ALL-UNNAMED',
        '-Djdk.reflect.useDirectMethodHandle=false',
        '-Xmx2048m',  // 힙 메모리 최대 크기 설정
        '-Xms512m'    // 힙 메모리 초기 크기 설정
    ]
}

tasks.withType(JavaExec) {
    jvmArgs = [
        '--add-opens=java.base/java.util=ALL-UNNAMED',
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
        '--add-opens=java.base/java.text=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
        '--add-opens=java.base/java.nio=ALL-UNNAMED',
        '--add-opens=java.base/java.util.stream=ALL-UNNAMED',
        '--add-opens=java.base/java.util.function=ALL-UNNAMED',
        '--add-opens=java.base/java.time=ALL-UNNAMED',
        '-Djdk.reflect.useDirectMethodHandle=false',
        '-Xmx2048m',
        '-Xms512m'
    ]
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': 'org.example.payment_guard.ReportApplication'
    }
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task printClasspath {
    doLast {
        println configurations.runtimeClasspath.collect { it }.join(':')
    }
}